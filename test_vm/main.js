import { Blockchain } from '@ethereumjs/blockchain'
import { Chain, Common, Hardfork } from '@ethereumjs/common'
import { EVM } from '@ethereumjs/evm'
import { DefaultStateManager } from '@ethereumjs/statemanager'

async function deployAndCallContract() {

  const common = new Common({ chain: Chain.Mainnet, hardfork: Hardfork.London })
  const stateManager = new DefaultStateManager()
  const blockchain = await Blockchain.create()

  const evm = new EVM({
    common,
    stateManager,
    blockchain,
  })

  // Read the compiled contract (bytecode)
  const compiledBytecode = '608060405234801561001057600080fd5b5061055a806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80632e6636521461005157806360b0d8331461006f578063655d2c271461008e578063ce665dd8146100ac575b600080fd5b6100596100ca565b6040516100669190610261565b60405180910390f35b6100776100dc565b60405161008592919061030c565b60405180910390f35b610096610237565b6040516100a39190610261565b60405180910390f35b6100b461023d565b6040516100c19190610261565b60405180910390f35b603c611f406100d9919061036b565b81565b6060600080603c611f406100f0919061036b565b63ffffffff1667ffffffffffffffff81111561010f5761010e6103a8565b5b6040519080825280601f01601f1916602001820160405280156101415781602001600182028036833780820191505090505b50905060008063ffffffff1690505b6000603c611f40610161919061036b565b61016b91906103d7565b63ffffffff168110156102295760006080826101879190610448565b14610193576004610196565b600a5b60ff1681901c60006010836101ab9190610448565b146101b75760066101ba565b60045b60ff1682901c1760f81b82600063ffffffff16836101d89190610479565b815181106101e9576101e86104ad565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080610222906104dc565b9050610150565b5080611f4092509250509091565b611f4081565b600081565b600063ffffffff82169050919050565b61025b81610242565b82525050565b60006020820190506102766000830184610252565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102b657808201518184015260208101905061029b565b60008484015250505050565b6000601f19601f8301169050919050565b60006102de8261027c565b6102e88185610287565b93506102f8818560208601610298565b610301816102c2565b840191505092915050565b6000604082019050818103600083015261032681856102d3565b90506103356020830184610252565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061037682610242565b915061038183610242565b925082820261038f81610242565b91508082146103a1576103a061033c565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006103e282610242565b91506103ed83610242565b9250828201905063ffffffff8111156104095761040861033c565b5b92915050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006104538261040f565b915061045e8361040f565b92508261046e5761046d610419565b5b828206905092915050565b60006104848261040f565b915061048f8361040f565b92508282039050818111156104a7576104a661033c565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006104e78261040f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105195761051861033c565b5b60018201905091905056fea2646970667358221220b64122841b5c95784017bced337df196ae6dacc710b30034237f9ba8b25e2bc864736f6c63430008130033';

  evm
    .runCode({
      code: compiledBytecode,
      gasLimit: BigInt(0xffff),
    })
    .then((results) => {
      console.log(`Returned: ${bytesToHex(results.returnValue)}`)
      console.log(`gasUsed: ${results.executionGasUsed.toString()}`)
    })
    .catch(console.error)

}


